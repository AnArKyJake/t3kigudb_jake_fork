import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import * as DropdownMenu from '@radix-ui/react-dropdown-menu';

import { api } from "~/utils/api";
import { useEffect, useRef, useState } from "react";
import DashboardLayout from "./layout";
import Layout from "./layout";

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });
  const exampleChar = api.character.getById.useQuery("Amber");
  const placeholderImg = "https://placehold.co/400x400?text=Unknown";
  const [page, setPage] = useState(0);  
  const [origin, setOrigin] = useState("Genshin Impact");
  const bottomRef = useRef<HTMLDivElement>(null);
  const { data: characterData, fetchNextPage, hasNextPage, isFetching } = api.character.getByOrigin.useInfiniteQuery({
    limit: 10,
    origin: origin
  },{
    getNextPageParam: (lastPage) => lastPage.nextCursor,
  })
  const allOrigins = api.origin.getAll.useQuery();
  const toShow = characterData?.pages[page]?.items;

  const handleOriginChange = (val: string) => {
    setOrigin(val);
  }

  const handleObserver: IntersectionObserverCallback = ([entry]) => {
    if (entry?.isIntersecting && hasNextPage && !isFetching) {
      void fetchNextPage();
    }
  }

  useEffect(() => {
    const observer = new IntersectionObserver(handleObserver, { threshold: 0 });
    if (bottomRef.current) {
      observer.observe(bottomRef.current);
    }
    return () => observer.disconnect();
  }, [bottomRef, hasNextPage, isFetching]);

  return (
    <>
      <Layout>
            
      <div className="container flex flex-row justify-center">
      <DropdownMenu.Root>
        <DropdownMenu.Trigger className="shadow-md rounded-md px-5">
          Select Media
        </DropdownMenu.Trigger>
        <DropdownMenu.Portal>
        <DropdownMenu.Content
            className="bg-white rounded-md shadow-md min-w-[220px] p-[5px] divide-y divide-gray-300"
            sideOffset={3}
          >
            {allOrigins.data ? allOrigins.data.map((origin) => {
            return (
              <DropdownMenu.Item
                key={origin.name}
                onClick={() => handleOriginChange(origin.name)}
              >
                {origin.name}
              </DropdownMenu.Item>
            )
          }) : "Loading..."}
          </DropdownMenu.Content>
        </DropdownMenu.Portal>
      </DropdownMenu.Root>
      </div>
      <div className="container flex flex-row items-center justify-center">
        <div className="grid grid-cols-2 gap-4 py-2 px-2">
          {characterData?.pages ? characterData.pages.map((page) => 
            page.items.map((char) => (
              <div key={char.id} className="relative rounded-lg overflow-hidden shadow-md h-48">
                <img className="w-full h-auto object-cover object-center" src={char.picUrl ?? placeholderImg} alt="Card Image" />
                <div className="absolute bottom-0 left-0 right-0 bg-gray-800 bg-opacity-50 py-2 px-6">
                  <h3 className="text-lg font-medium text-white mb-2">{char.name}</h3>
                  <p className="text-sm text-gray-300">{char.originName}</p>
                </div>
              </div>
            ))
          ) : "Nothing"}
          {characterData?.pages && (<div ref={bottomRef} />)}
          {isFetching && <div>Loading More...</div>}
        </div>
        
      </div>
      
      {/* <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Create <span className="text-[hsl(280,100%,70%)]">T3</span> App
          </h1>
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/usage/first-steps"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">First Steps →</h3>
              <div className="text-lg">
                Just the basics - Everything you need to know to set up your
                database and authentication.
              </div>
            </Link>
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/introduction"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">Documentation →</h3>
              <div className="text-lg">
                Learn more about Create T3 App, the libraries it uses, and how
                to deploy it.
              </div>
            </Link>
          </div>
          <div className="flex flex-col items-center gap-2">
            <p className="text-2xl text-white">
              {hello.data ? hello.data.greeting : "Loading tRPC query..."}
            </p>
            <p className="text-2xl text-white">
              {exampleChar.data ? exampleChar.data.colorCode : "Loading char data"}
            </p>
            <AuthShowcase />
          </div>
        </div>
      </main> */}
      </Layout>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined },
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
